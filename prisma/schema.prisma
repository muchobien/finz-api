// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "tracing"]
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  APPLE
  GOOGLE
  LOCAL
}

model Identity {
  id        String   @id @default(cuid())
  token     String
  provider  Provider
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @db.Timestamptz
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  USER
}

model User {
  id         String     @id @default(cuid())
  email      String     @unique
  role       Role       @default(USER)
  settings   Json       @default("{}") @db.JsonB
  createdAt  DateTime   @default(now()) @db.Timestamptz
  updatedAt  DateTime   @updatedAt @db.Timestamptz
  accounts   Account[]
  identities Identity[]
}

model Account {
  id           String        @id @default(cuid())
  name         String
  color        String?
  createdAt    DateTime      @default(now()) @db.Timestamptz
  updatedAt    DateTime      @updatedAt @db.Timestamptz
  userId       String
  owner        User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Category {
  id           String        @id @default(cuid())
  name         String        @unique
  color        String?
  parent       Category?     @relation("parent", fields: [parentId], references: [id])
  parentId     String?
  createdAt    DateTime      @default(now()) @db.Timestamptz
  updatedAt    DateTime      @updatedAt @db.Timestamptz
  transactions Transaction[]
  categories   Category[]    @relation("parent")
}

enum TransactionKind {
  INCOME
  EXPENSE
  TRANSFER
}

enum TransactionInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model Transaction {
  id         String               @id @default(cuid())
  name       String
  amount     Float
  kind       TransactionKind
  date       DateTime             @db.Date
  scheduled  Boolean              @default(false)
  interval   TransactionInterval?
  startDate  DateTime?
  endDate    DateTime?
  createdAt  DateTime             @default(now()) @db.Timestamptz
  updatedAt  DateTime             @updatedAt @db.Timestamptz
  categoryId String
  category   Category             @relation(fields: [categoryId], references: [id])
  accountId  String
  account    Account              @relation(fields: [accountId], references: [id])

  @@index([accountId, date, kind])
}

model RemoteConfig {
  name  String @id
  value Json   @db.JsonB
}
