type User {
  id: ID!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  settings: JSON!

  accounts: [Account!]!
}

type Credential {
  accessToken: String!
  refreshToken: String!
  tokenKind: String!
}

type Authenticated {
  user: User!
  credential: Credential!
}

type Query {
  user(id: ID!): User!
  users: [User!]!
}

input UserInput {
  email: String!
}

input AuthInput {
  provider: Provider!
  email: String!
  token: String!
}

enum Provider {
  APPLE
  GOOGLE
  LOCAL
}

type Mutation {
  updateUser(id: ID!, input: UserInput!): User! @auth(requires: USER)
  deleteUser(id: ID!): Void @auth(requires: USER)

  register(input: AuthInput!): Authenticated!
  login(input: AuthInput!): Authenticated!
  refreshToken: Credential!
}
